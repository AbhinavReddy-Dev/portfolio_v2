---
import Container from "../layouts/container.astro";
import Layout from "../layouts/page.astro";
import { icons } from "../data/icons";
const title = "Everything I Do";
const id = "everything-i-do";
const noNavBar = true;
---

<Layout content={{ title, id, noNavBar }}>
  <Container content={{ title: null, id, showTitle: false }}>
    <div class="code-div my-20 flex min-h-fit flex-col justify-center gap-5">
      <div
        class="mx-auto grid w-11/12 grid-cols-3 gap-10 md:max-w-xl md:gap-20">
        {
          icons.map((icon) => (
            <img
              class="icon m-auto rounded-lg border-[3px] border-pink-300 p-2 hover:cursor-pointer hover:bg-pink-700 md:p-6"
              src={icon.url}
              alt={icon.name}
            />
          ))
        }
      </div>
    </div>

    <div
      class="modal absolute top-0 left-0 z-10 hidden min-h-screen w-screen flex-col bg-white p-5 md:p-20">
      <div class="mx-auto my-10 max-w-xl">
        <!-- <h1
        class="mt-16 w-full text-center font-sans text-3xl font-semibold uppercase tracking-wide text-amber-500 md:mb-20 md:mt-28 md:text-6xl">
        Happy Birthday 💛
      </h1> -->
        <img class="image mx-auto rounded-lg border-4 border-rose-400" src="" />
        <p
          class="text my-10 w-full text-center font-sans text-xl font-normal uppercase leading-10 tracking-normal text-red-500 md:text-4xl md:leading-[4rem]">
        </p>
        <p
          class="wit my-15 w-full text-center font-mono text-lg font-normal uppercase leading-10 tracking-wide text-blue-500 md:text-2xl md:leading-[4rem]">
        </p>

        <p
          class="ps text-small md:text-md mt-15 w-full text-center font-mono font-normal italic leading-10 tracking-normal text-gray-500 md:leading-[2rem]">
        </p>
      </div>
    </div>
  </Container>
</Layout>

<script>
  import confetti from "https://cdn.skypack.dev/canvas-confetti";

  const birthdayImg = "/0D3BA251-2F0E-4A85-A461-1CC56B33B5A5.jpeg";
  const birthdayText =
    "Through all the ups and downs, pauses that lasted years, your pure spirit, love, and care have been a true blessing to this soul. Cheers to a decade of friendship and to one more year of your existence in this universe! Can't wait to create the most beautiful memories with you. Everything was, is and will be about you, ever! 💝";
  const birthdayWit = "There's something on your face. What is it?";

  const monthlyImg = "/13BF43D2-34A0-4669-9F47-21F90C727EFE.jpeg";
  const monthlyText =
    "Thanks for sticking around, you are the best and you deserve the best! The extrovert in me didn't understand the ways you reciprocate, I was only looking at it from one way, assuming you'd do it the same way I did. But you're an introvert, your presense and attention is the reciprocation I should've interpreted. I never blame anything on you, because I believe I can understand and treat you better if I had paid close attention to all the things you said yes to.";
  const monthlyWit =
    "You are a B💣MB, anyone saying otherwise can kiss my 🍑SS!";

  const monthlyImg2 = "/our_calls.png";
  const monthlyText2 =
    "I am grateful for all the time we're spending everyday talking to each other, sharing & developing the bond that was long due and also for sharing our deepest thoughts, feelings, emotions and everything that is personally vulnerable. You never overshare with the right person because you feel heard and all I see so far is GREEN for a million miles in all directions.";
  const monthlyWit2 =
    "You are my inspiration for daily affirmations and I wish to be yours.";
  const monthlyWit2_1 = "Superior Posterior 🍑!";
  const monthlyWit2_2 =
    "Repeat after me! I'm Big. I'm Brave. I'm Beautiful. (Did I hear 'Beautiful' properly? 🫐)";
  const monthlyloveline =
    "For every single reason if I ever find to not love you, I already have a million reasons to love you more.";
  const psLine =
    "PS: This should've been the card for the month of September 😕";
  const songLink0 =
    "https://music.apple.com/us/lyrics/1611059147?ts=61.284&te=67.434&l=en&tk=2.v1.K0W2NzNfi2I1PuIpo5NxeA%3D%3D&itscg=50401&itsct=sharing_msg_lyrics";

  const modal = document.querySelector(".modal");
  const codeDiv = document.querySelector(".code-div");
  const image = document.querySelector(".image");
  const text = document.querySelector(".text");
  const wit = document.querySelector(".wit");
  const ps = document.querySelector(".ps");

  const birthdayCode = ["butterfly", "dog", "dolphin", "ladybug", "swan"];
  const monthlyCodes = [
    ["crab", "elephant", "horse", "hummingbird", "tortoise"],
    ["dove", "crab", "butterfly", "jellyfish", "dolphin", "hummingbird"],
  ];
  const splCode = ["butterfly", "deer", "dolphin", "dove", "swan"];
  let codeCheck = [];

  const showContent = () => {
    modal.classList.remove("hidden");
    modal.classList.add("flex");

    codeDiv.classList.remove("flex");
    codeDiv.classList.add("hidden");
  };

  const iconsEvents = document.querySelectorAll(".icon");
  iconsEvents.forEach((iconEle) => {
    iconEle.addEventListener("click", (e) => {
      const iconName = e.target.alt;
      // console.log(iconName);
      if (codeCheck.includes(iconName)) {
        const index = codeCheck.indexOf(iconName);
        if (index > -1) {
          codeCheck.splice(index, 1);
          codeCheck.sort();
          // console.log(code, codeCheck);
        }
        iconEle.classList.remove("bg-pink-800");
      } else {
        codeCheck.push(iconName);
        codeCheck.sort();
        iconEle.classList.add("bg-pink-800");
      }

      // birthday message
      if (
        codeCheck.length === birthdayCode.length &&
        birthdayCode.toLocaleString() === codeCheck.toLocaleString()
      ) {
        confetti();
        showContent();
        image.setAttribute("src", birthdayImg);
        text.innerHTML = birthdayText;
        wit.innerHTML = birthdayWit;
      }
      // monthly message
      // console.log(monthlyCodes.lastIndexOf(codeCheck), codeCheck);
      // const mCode = () => {
      for (var i = 0; i < monthlyCodes.length; i++) {
        console.log(
          codeCheck.length,
          monthlyCodes[i].length,
          monthlyCodes[i].sort().toLocaleString(),
          codeCheck.toLocaleString()
        );
        if (
          codeCheck.length === monthlyCodes[i].length &&
          monthlyCodes[i].toLocaleString() === codeCheck.toLocaleString()
        ) {
          showContent();
          if (i === 0) {
            image.setAttribute("src", monthlyImg);
            text.innerHTML = monthlyText;
            wit.innerHTML = monthlyWit;
          }
          if (i === 1) {
            image.setAttribute("src", monthlyImg2);
            text.innerHTML = monthlyText2;
            wit.innerHTML = monthlyWit2_1;
            ps.innerHTML = psLine;
          }

          return;
          // return true;
        }
      }
      // };
      // console.log(mCode.sort(), codeCheck.toLocaleString());
      // if (mCode) {
      //   showContent();
      //   image.setAttribute("src", monthlyImg2);
      //   text.innerHTML = monthlyText2;
      //   wit.innerHTML = monthlyWit2;
      // }
      // songlink
      if (
        codeCheck.length === splCode.length &&
        splCode.toLocaleString() === codeCheck.toLocaleString()
      ) {
        window.location.assign(songLink0);
      }
    });
  });
</script>
